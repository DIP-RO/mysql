create database wscube
use wscube


#create table
CREATE TABLE students (
  id INT NOT NULL,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(45) NOT NULL,
  age tinyint check(age>=18)
  )

#go to sql file
insert data on table single row input
INSERT INTO users
(id,name,email,password,contact,address,dob,gender,status)
values
(1,"dip","dipro@gmail.com","1234444","123324r3rr4","barisal","1999-01-01","M",1)

multiple row 
INSERT INTO users
(id,name,email,password,contact,address,dob,gender,status)
values
(2,"akash","dak@gmail.com","1234444","123324r3rr4","barisal","1999-01-01","M",1),
(3,"shuv","o@gmail.com","1234444","123324r3rr4","barisal","1999-01-01","M",1),
(4,"di","digmail.com","1234444","123324r3rr4","barisal","1999-01-01","F",0)

#select query
select id, name,gender,address from users
for all copy 
SELECT * FROM users

#Where clause
used for filtering
SELECT * FROM users WHERE gender = "F"
SELECT * FROM `wscube`.`students` WHERE age>20 AND age<29
SELECT * FROM `wscube`.`students` WHERE age>29 OR name="di"
SELECT * FROM `wscube`.`students` WHERE age IN(19,21)
#LIKE operator and wildcard(searching)
SELECT * FROM `wscube`.`students` WHERE name LIKE "d%"
SELECT * FROM `wscube`.`students` WHERE name LIKE "%u%"
SELECT * FROM `wscube`.`students` WHERE name LIKE "i____"
SELECT * FROM `wscube`.`students` WHERE name LIKE "i____%"
SELECT * FROM `wscube`.`students` WHERE name LIKE "%_a_%"

#BETWEEN AND Not Between(for range)
SELECT * FROM `wscube`.`students` WHERE age between 20 and 29
SELECT * FROM `wscube`.`students` WHERE age not between 20 and 29

#orderby and distinct
SELECT * FROM `wscube`.`students` order by name asc
SELECT * FROM `wscube`.`students` order by name desc

SELECT distinct city FROM students
SELECT distinct city FROM students order by age asc

#NULL
Insert into `wscube`.`students` values(4,"kkk","k@gmail.com",NULL)
SELECT * FROM `wscube`.`students` WHERE age IS NULL
SELECT * FROM `wscube`.`students` WHERE age IS NOT NULL

#limit and offset
SELECT * FROM `wscube`.`students` LIMIT 5
SELECT * FROM `wscube`.`students` ORDER BY name DESC LIMIT 5
SELECT * FROM `wscube`.`students` WHERE age>20  LIMIT 5
SELECT * FROM `wscube`.`students` WHERE age>25  LIMIT 5 offset 1(for pagination)

#agrregate function(count,sum,avg,min,max)
SELECT  count(id) from workers where fees>5000
SELECT  sum(fees) from workers 
SELECT  avg(fees) from workers 
SELECT  min(fees) from workers 
SELECT  max(fees) from workers 

#update statement
update workers set age = 20 where id =3

#delete query
delete from workers  where id =3
delete from workers  where id in(4,5)

#(commit & rollback) data  transcation 
sELECT * FROM workers 
SELECT * FROM workers 
commit;
update workers set fees = 7000 where id = 6 ;
commit;
rollback;

#primarykey and foerign key
its contain always unique data
it cannot be null
there must be a single primary key 

foreign: the foreign key is used to linked two tables
a foriegn key in one table(child table) is used to point primary key in another table(parent table)
CREATE TABLE cities (
  cid INT NOT NULL AUTO_INCREMENT,
  city_name VARCHAR(100) NOT NULL,
  PRIMARY KEY (cid),
  UNIQUE (city_name)
);
INSERT INTO cities (city_name)
VALUES ('New York'),
       ('Los Angeles'),
       ('Chicago'),
       ('Houston'),
       ('Phoenix'),
       ('Philadelphia'),
       ('San Antonio'),
       ('San Diego'),
       ('Dallas'),
       ('San Francisco');
CREATE TABLE employees (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  city_id INT,
  PRIMARY KEY (id),
  FOREIGN KEY (city_id) REFERENCES cities(cid)
);
INSERT INTO employees (name, email, city_id)
VALUES 
  ('John Smith', 'john.smith@example.com', 1),
  ('Emily Johnson', 'emily.johnson@example.com', 2),
  ('Michael Davis', 'michael.davis@example.com', 3),
  ('Jessica Brown', 'jessica.brown@example.com', 4),
  ('Daniel Wilson', 'daniel.wilson@example.com', 5);

#ROLLBACK AND COMMIT

(after commit rollback is not posiible)
select * from students
COMMIT;
update students set age = 30 WHERE id =3;
select * from students
ROLLBACK;
select * from students


